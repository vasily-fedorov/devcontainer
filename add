#!/usr/bin/env sh

# Check if feature name is provided
if [ -z "$1" ]; then
    echo "Usage: $0 -f <feature>"
    exit 1
fi

# Parse command line arguments
while getopts "f:" opt; do
    case $opt in
        f)
            FEATURE=$OPTARG
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done

if [ -z "$FEATURE" ]; then
    echo "Feature name is required. Usage: $0 -f <feature>"
    exit 1
fi

# Check if feature directory exists
if [ ! -d "$(dirname "$0")/features/$FEATURE" ]; then
    echo "Feature '$FEATURE' not found in features directory"
    exit 1
fi

# Copy feature directly to .devcontainer
echo "Adding feature: $FEATURE"
cp -r "$(dirname "$0")/features/$FEATURE" ".devcontainer/$FEATURE"

# Update Dockerfile to include feature's install.sh
echo "Adding feature installation to Dockerfile"
if [ -f ".devcontainer/Dockerfile" ]; then
    # Create a backup of the original Dockerfile
    cp ".devcontainer/Dockerfile" ".devcontainer/Dockerfile.backup"
    
    # Find the line with "# features end" and insert the feature install command before it
    awk '
    /# features end/ {
        print "RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \\"
        print "    --mount=type=cache,target=/var/lib/apt,sharing=locked \\"
        print "    --mount=type=cache,target=/root/.cache,sharing=locked \\"
        print "    --mount=type=cache,target=/home/$USER_NAME/.cache,sharing=locked \\"
        print "    if [ -f /workspace/.devcontainer/'$FEATURE'/install.sh ]; then bash /workspace/.devcontainer/'$FEATURE'/install.sh; fi"
        print $0
        next
    }
    { print $0 }
    ' ".devcontainer/Dockerfile.backup" > ".devcontainer/Dockerfile"
    
    # Remove the backup
    rm ".devcontainer/Dockerfile.backup"
fi

# Update up script to include feature's compose.yaml if it exists
if [ -f ".devcontainer/$FEATURE/compose.yaml" ]; then
    echo "Adding feature compose.yaml to up script"
    # Create a backup of the original up script
    cp ".devcontainer/up" ".devcontainer/up.backup"
    
    # Create a new up script that includes the feature's compose.yaml
    cat > ".devcontainer/up" << 'EOF'
#!/usr/bin/env sh
docker compose -f ./.devcontainer/compose.yaml \
EOF
    
    # Add all feature compose.yaml files
    for feature_dir in .devcontainer/*/; do
        if [ -f "${feature_dir}compose.yaml" ]; then
            feature_name=$(basename "$feature_dir")
            echo "    -f ./.devcontainer/${feature_name}/compose.yaml \\" >> ".devcontainer/up"
        fi
    done
    
    # Add the rest of the original up script
    cat >> ".devcontainer/up" << 'EOF'
    up -d --build --remove-orphans
EOF
    
    # Remove the backup
    rm ".devcontainer/up.backup"
fi

echo "Feature '$FEATURE' added successfully"
