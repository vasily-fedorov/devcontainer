#+title: Readme

Контейнеризация разработки на стандартных инструментах в vscode [[https://containers.dev/][devcontainer]]-совместимом виде.

* Что умеет
1. Работа на стандартных инструментах - bash, Docker, Docker Compose, без магии. Можно использовать без vscode и в ci/cd.
2. Не нужны никакие дополнительные пакеты для работы
3. Запускается одной кнопкой в vscode
4. Быстрая контейнеризация любого проекта и любой активности: не надо вспоминать мелкие настройки, править gitignore, dockerignore, как хранить историю bash и т.д.
5. Можно отлаживать создание devcontainer
6. Кэш при сборке, хранение истории bash
7. Поддержка features

* Использование
** Инициализация devcontainer
#+begin_src shell
git clone https://github.com/vasily-fedorov/devcontainer
cd project
../devcontainer/init <project_name>
#+end_src

** Использование devcontainer
В корне проекта:
#+begin_src shell
.devcontainer/activate
#+end_src
И попадаем в =bash= внутри контейнера.
Редактировать исходный код можно снаружи контейнера, можно внутри. Внутри контейнера он расположен в =/workspace=.

** Доступные команды
Доступные после инициализации команды повторяют devcontainer/cli .
- .devcontainer/up :: сборка и запуск контейнеров
- .devcontainer/build :: сборка контейнеров
- .devcontainer/activate :: сборка, запуск и логин в bash внутри основного контейнера
- .devcontainer/exec :: запуск команды внутри контейнера. Например,  =/devcontainer/exec bash= запускает в shell внутри контейнера.
- .devcontainer/stop :: останавливает контейнеры (еще [[https://github.com/devcontainers/cli?tab=readme-ov-file][не реализовано]] в cli )

** Подключение features
Можно подключать локальные features в devcontainer-совместимом виде.

Для подключения оформленного по стандарту devcontainer feature используется команда feature:
#+begin_src shell
feature add <path_to_feature>
#+end_src

Например, в корне проекта:
#+begin_src shell
../devcontainer/feature add ../devcontainer/features/python
#+end_src

Также поддерживается скачивание features из OCI registry (ghcr.io):
#+begin_src shell
../devcontainer/feature add ghcr.io/devcontainers/features/python:1
#+end_src

Доступные в этом репозитории features:
- python :: Python с pyenv и поддержкой виртуальных окружений
- terraform :: Terraform с провайдером Yandex Cloud
- yandexcloud-cli :: Yandex Cloud CLI (yc)
- dind :: Docker-in-Docker
- litestream :: Litestream для репликации SQLite
- direnv :: Direnv для управления переменными окружения

** Удаление features
#+begin_src shell
../devcontainer/feature delete <feature_name>
#+end_src

** Данные, кэш и bash_history
Все данные по умолчанию внутри ./.devcontainer
- .devcontainer/bash_history :: история bash внутри контейнера
- .devcontainer/data :: данные подключенных сервисов
- .devcontainer/cache :: ~/.cache

* Что сделано
** Кэширование apt и pip
При сборке необходимые пакеты скачиваются один раз, в следующий раз сборка пройдет быстрее.
** Ведение истории bash
** Правильные gitignore и dockerignore
** Поддержка devcontainer features
- Локальные features с установкой через install.sh
- Автоматическое добавление в devcontainer.json
- Поддержка compose.yaml для features
- Скачивание features из OCI registry (ghcr.io)

* Пример использования
#+begin_src shell
git clone https://github.com/django-ve/django-helloworld
git clone https://github.com/vasily-fedorov/devcontainer
cd django-helloworld
../devcontainer/init helloworld
../devcontainer/feature add ../devcontainer/features/python
.devcontainer/activate
pip install -r requirements.txt
python manage.py runserver 0.0.0.0:8000
#+end_src
И идем на http://localhost:8000, видим надпись "Hello world"

* Структура проекта
#+begin_src
devcontainer/
├── features/           # Доступные features
│   ├── python/
│   ├── terraform/
│   ├── yandexcloud-cli/
│   ├── dind/
│   ├── litestream/
│   └── direnv/
├── services/           # Конфигурации сервисов
│   ├── postgres.yaml
│   ├── redis.yaml
│   ├── rabbitmq.yaml
│   ├── elasticmq.yaml
│   ├── mailhog.yaml
│   └── minio.yaml
├── devcontainer/       # Шаблоны для инициализации
│   ├── Dockerfile
│   ├── compose.yaml
│   ├── devcontainer.json
│   └── ...
├── feature             # Скрипт управления features
├── init               # Скрипт инициализации проекта
└── README.org
#+end_src
